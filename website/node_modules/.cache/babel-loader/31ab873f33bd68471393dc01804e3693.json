{"ast":null,"code":"import { GET_COMPANIES, REGISTER, CHECK_AUTH, SIGNOUT, UPDATE, DELETE, COMPANY_ERROR, TOGGLE_SUCCESS, AUTH } from './../types/companyTypes';\nconst initialState = {\n  currentCompany: null,\n  companies: [],\n  companyError: null,\n  companySuccess: false\n};\n\nconst companyReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COMPANIES:\n      return { ...state,\n        companies: action.payload\n      };\n\n    case AUTH:\n      return { ...state,\n        currentCompany: action.payload,\n        companyError: null,\n        companySuccess: !state.companySuccess\n      };\n\n    case CHECK_AUTH:\n      return { ...state,\n        currentCompany: action.payload\n      };\n\n    case SIGNOUT:\n      return { ...state,\n        companies: action.payload\n      };\n\n    case REGISTER:\n      return { ...state,\n        companySuccess: !state.companySuccess\n      };\n\n    case UPDATE:\n      const jwt = JSON.parse(localStorage.getItem(\"jwt\"));\n      const newJwt = { ...jwt,\n        user: action.payload\n      };\n      localStorage.setItem(\"jwt\", JSON.stringify(newJwt));\n      return { ...state,\n        currentCompany: { ...state.currentCompany,\n          user: action.payload\n        },\n        companySuccess: !state.companySuccess\n      };\n\n    case DELETE:\n      const updatedUsers = state.companies.filter(company => company._id !== action.payload._id);\n      return { ...state,\n        companies: updatedUsers,\n        currentUser: null\n      };\n\n    case COMPANY_ERROR:\n      return { ...state,\n        companyError: action.payload\n      };\n\n    case TOGGLE_SUCCESS:\n      return { ...state,\n        companySuccess: !state.companySuccess\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default companyReducer;","map":{"version":3,"sources":["C:/Users/Renata/Desktop/projects/My website2/website/src/redux/reducers/companyReducer.js"],"names":["GET_COMPANIES","REGISTER","CHECK_AUTH","SIGNOUT","UPDATE","DELETE","COMPANY_ERROR","TOGGLE_SUCCESS","AUTH","initialState","currentCompany","companies","companyError","companySuccess","companyReducer","state","action","type","payload","jwt","JSON","parse","localStorage","getItem","newJwt","user","setItem","stringify","updatedUsers","filter","company","_id","currentUser"],"mappings":"AAAA,SACIA,aADJ,EAEIC,QAFJ,EAGIC,UAHJ,EAIIC,OAJJ,EAKIC,MALJ,EAMIC,MANJ,EAOIC,aAPJ,EAQIC,cARJ,EASIC,IATJ,QAUO,yBAVP;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,IADC;AAEjBC,EAAAA,SAAS,EAAC,EAFO;AAGjBC,EAAAA,YAAY,EAAE,IAHG;AAIjBC,EAAAA,cAAc,EAAE;AAJC,CAArB;;AAUA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKjB,aAAL;AACI,aAAO,EACP,GAAGe,KADI;AAEPJ,QAAAA,SAAS,EAAEK,MAAM,CAACE;AAFX,OAAP;;AAIJ,SAAKV,IAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHL,QAAAA,cAAc,EAAEM,MAAM,CAACE,OAFpB;AAGHN,QAAAA,YAAY,EAAE,IAHX;AAIHC,QAAAA,cAAc,EAAE,CAACE,KAAK,CAACF;AAJpB,OAAP;;AAMJ,SAAKX,UAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHL,QAAAA,cAAc,EAAEM,MAAM,CAACE;AAFpB,OAAP;;AAIJ,SAAKf,OAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHJ,QAAAA,SAAS,EAAEK,MAAM,CAACE;AAFf,OAAP;;AAIJ,SAAKjB,QAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHF,QAAAA,cAAc,EAAE,CAACE,KAAK,CAACF;AAFpB,OAAP;;AAIJ,SAAKT,MAAL;AACI,YAAMe,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAX,CAAZ;AACA,YAAMC,MAAM,GAAG,EAAC,GAAGL,GAAJ;AAASM,QAAAA,IAAI,EAAET,MAAM,CAACE;AAAtB,OAAf;AACAI,MAAAA,YAAY,CAACI,OAAb,CAAqB,KAArB,EAA4BN,IAAI,CAACO,SAAL,CAAeH,MAAf,CAA5B;AACA,aAAO,EACH,GAAGT,KADA;AAEHL,QAAAA,cAAc,EAAG,EAAC,GAAGK,KAAK,CAACL,cAAV;AAA0Be,UAAAA,IAAI,EAAET,MAAM,CAACE;AAAvC,SAFd;AAGHL,QAAAA,cAAc,EAAE,CAACE,KAAK,CAACF;AAHpB,OAAP;;AAKJ,SAAKR,MAAL;AACI,YAAMuB,YAAY,GAAGb,KAAK,CAACJ,SAAN,CAAgBkB,MAAhB,CAChBC,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBf,MAAM,CAACE,OAAP,CAAea,GAD3B,CAArB;AAEA,aAAO,EACH,GAAGhB,KADA;AAEHJ,QAAAA,SAAS,EAAEiB,YAFR;AAGHI,QAAAA,WAAW,EAAE;AAHV,OAAP;;AAKJ,SAAK1B,aAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,YAAY,EAAEI,MAAM,CAACE;AAFlB,OAAP;;AAIJ,SAAKX,cAAL;AACI,aAAO,EACJ,GAAGQ,KADC;AAEJF,QAAAA,cAAc,EAAE,CAACE,KAAK,CAACF;AAFnB,OAAP;;AAIJ;AACA,aAAOE,KAAP;AAxDJ;AA0DH,CA3DD;;AA8DA,eAAeD,cAAf","sourcesContent":["import {\r\n    GET_COMPANIES,\r\n    REGISTER,\r\n    CHECK_AUTH,\r\n    SIGNOUT,\r\n    UPDATE,\r\n    DELETE,\r\n    COMPANY_ERROR,\r\n    TOGGLE_SUCCESS,\r\n    AUTH,\r\n} from './../types/companyTypes';\r\n\r\nconst initialState = {\r\n    currentCompany: null, \r\n    companies:[],\r\n    companyError: null,\r\n    companySuccess: false,\r\n    \r\n};\r\n\r\n\r\n\r\nconst companyReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case GET_COMPANIES: \r\n            return {\r\n            ...state,\r\n            companies: action.payload \r\n            };\r\n        case AUTH:\r\n            return {\r\n                ...state, \r\n                currentCompany: action.payload,\r\n                companyError: null,\r\n                companySuccess: !state.companySuccess\r\n            };\r\n        case CHECK_AUTH:\r\n            return {\r\n                ...state, \r\n                currentCompany: action.payload \r\n            };\r\n        case SIGNOUT:\r\n            return {\r\n                ...state, \r\n                companies: action.payload \r\n            };\r\n        case REGISTER:\r\n            return {\r\n                ...state,\r\n                companySuccess: !state.companySuccess,\r\n            };\r\n        case UPDATE:\r\n            const jwt = JSON.parse(localStorage.getItem(\"jwt\"));\r\n            const newJwt = {...jwt, user: action.payload};\r\n            localStorage.setItem(\"jwt\", JSON.stringify(newJwt));\r\n            return {\r\n                ...state,\r\n                currentCompany:  {...state.currentCompany, user: action.payload},\r\n                companySuccess: !state.companySuccess,\r\n            };\r\n        case DELETE:\r\n            const updatedUsers = state.companies.filter(\r\n                (company) => company._id !== action.payload._id);\r\n            return {\r\n                ...state, \r\n                companies: updatedUsers,\r\n                currentUser: null,\r\n            };\r\n        case COMPANY_ERROR:\r\n            return {\r\n                ...state,\r\n                companyError: action.payload \r\n            };\r\n        case TOGGLE_SUCCESS:\r\n            return {\r\n               ...state, \r\n               companySuccess: !state.companySuccess,\r\n            };\r\n        default: \r\n        return state;\r\n    }\r\n}\r\n\r\n\r\nexport default companyReducer;\r\n"]},"metadata":{},"sourceType":"module"}